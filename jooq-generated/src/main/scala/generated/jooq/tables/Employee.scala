/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables


import generated.jooq.Keys
import generated.jooq.Test
import generated.jooq.tables.records.EmployeeRecord

import java.lang.Boolean
import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import scala.Array
import scala.Option


object Employee {

  /**
   * The reference instance of <code>test.employee</code>
   */
  val EMPLOYEE = new Employee
}

/**
 * This class is generated by jOOQ.
 */
class Employee(
  alias: Name,
  path: Table[_ <: Record],
  childPath: ForeignKey[_ <: Record, EmployeeRecord],
  parentPath: InverseForeignKey[_ <: Record, EmployeeRecord],
  aliased: Table[EmployeeRecord],
  parameters: Array[ Field[_] ],
  where: Condition
)
extends TableImpl[EmployeeRecord](
  alias,
  Test.TEST,
  path,
  childPath,
  parentPath,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table,
  where
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[EmployeeRecord] = classOf[EmployeeRecord]

  /**
   * The column <code>test.employee.id</code>.
   */
  val ID: TableField[EmployeeRecord, Integer] = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), "")

  /**
   * The column <code>test.employee.name</code>.
   */
  val NAME: TableField[EmployeeRecord, String] = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), "")

  /**
   * The column <code>test.employee.salary</code>.
   */
  val SALARY: TableField[EmployeeRecord, Integer] = createField(DSL.name("salary"), SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>test.employee.age</code>.
   */
  val AGE: TableField[EmployeeRecord, Option[Int]] = createField(DSL.name("age"), SQLDataType.INTEGER, "", new converters.OptionIntConverter())

  private def this(alias: Name, aliased: Table[EmployeeRecord]) = this(alias, null, null, null, aliased, null, null)
  private def this(alias: Name, aliased: Table[EmployeeRecord], where: Condition) = this(alias, null, null, null, aliased, null, where)

  /**
   * Create an aliased <code>test.employee</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), generated.jooq.tables.Employee.EMPLOYEE)

  /**
   * Create an aliased <code>test.employee</code> table reference
   */
  def this(alias: Name) = this(alias, generated.jooq.tables.Employee.EMPLOYEE)

  /**
   * Create a <code>test.employee</code> table reference
   */
  def this() = this(DSL.name("employee"), null)

  override def getSchema: Schema = if (super.aliased()) null else Test.TEST

  override def getIdentity: Identity[EmployeeRecord, Integer] = super.getIdentity.asInstanceOf[ Identity[EmployeeRecord, Integer] ]

  override def getPrimaryKey: UniqueKey[EmployeeRecord] = Keys.EMPLOYEE_PKEY
  override def as(alias: String): Employee = new Employee(DSL.name(alias), this)
  override def as(alias: Name): Employee = new Employee(alias, this)
  override def as(alias: Table[_]): Employee = new Employee(alias.getQualifiedName(), this)

  /**
   * Rename this table
   */
  override def rename(name: String): Employee = new Employee(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): Employee = new Employee(name, null)

  /**
   * Rename this table
   */
  override def rename(name: Table[_]): Employee = new Employee(name.getQualifiedName(), null)

  /**
   * Create an inline derived table from this table
   */
  override def where(condition: Condition): Employee = new Employee(getQualifiedName(), if (super.aliased()) this else null, condition)

  /**
   * Create an inline derived table from this table
   */
  override def where(conditions: Collection[_ <: Condition]): Employee = where(DSL.and(conditions))

  /**
   * Create an inline derived table from this table
   */
  override def where(conditions: Condition*): Employee = where(DSL.and(conditions:_*))

  /**
   * Create an inline derived table from this table
   */
  override def where(condition: Field[Boolean]): Employee = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(condition: SQL): Employee = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(@Stringly.SQL condition: String): Employee = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(@Stringly.SQL condition: String, binds: AnyRef*): Employee = where(DSL.condition(condition, binds:_*))

  /**
   * Create an inline derived table from this table
   */
  override def whereExists(select: Select[_]): Employee = where(DSL.exists(select))

  /**
   * Create an inline derived table from this table
   */
  override def whereNotExists(select: Select[_]): Employee = where(DSL.notExists(select))
}
